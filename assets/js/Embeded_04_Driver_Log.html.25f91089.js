"use strict";(self.webpackChunkstudy_notes=self.webpackChunkstudy_notes||[]).push([[447],{258:(n,s,e)=>{e.r(s),e.d(s,{comp:()=>i,data:()=>t});var a=e(362);const l={},i=(0,e(5726).A)(l,[["render",function(n,s){return(0,a.uX)(),(0,a.CE)("div",null,[...s[0]||(s[0]=[(0,a.Fv)('<h3 id="不会吧-你还在赤裸裸的使用printf" tabindex="-1"><a class="header-anchor" href="#不会吧-你还在赤裸裸的使用printf"><span>不会吧，你还在赤裸裸的使用printf?</span></a></h3><p>哈喽，伙计们！</p><blockquote><p>最近做了一些Linux应用开发方面的东西，感觉现在有点混乱，所以想将每个知识点模块化，并且能够搭建自己的API库，方便以后能够直接使用！</p></blockquote><p>今天主要来讨论一下我们最常用的打印字符串，实现调试打印和颜色打印。</p><h2 id="_1、明确需求" tabindex="-1"><a class="header-anchor" href="#_1、明确需求"><span><strong>1、明确需求</strong></span></a></h2><p>在<code>Linux</code>开发环境下，我们日常使用的打印字符串的主要需求可能有两种：</p><ul><li><strong>多级别打印</strong>：我们调试打印信息可以分为多个级别，全局设置打印级别，来实现打印的全局管理！</li><li><strong>多颜色打印</strong>：不同的打印级别对应不同的打印色彩，方便快速吸引开发者的注意力，快速定位问题！</li></ul><p>基于以上两个基本需求，我们来进行简单封装。</p><h2 id="_2、打印级别分类" tabindex="-1"><a class="header-anchor" href="#_2、打印级别分类"><span><strong>2、打印级别分类</strong></span></a></h2><p>打印级别参考内核的分类，设置级别如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">typedefenum {</span>\n<span class="line">  LOG_EMERG=0, /**&lt; Emergency */</span>\n<span class="line">  LOG_ALERT,   /**&lt; Alert */</span>\n<span class="line">  LOG_CRIT,    /**&lt; Critical */</span>\n<span class="line">  LOG_ERR,     /**&lt; Error */</span>\n<span class="line">  LOG_WARNING, /**&lt; Warning */</span>\n<span class="line">  LOG_NOTICE,  /**&lt; Notice */</span>\n<span class="line">  LOG_INFO,    /**&lt; Information */</span>\n<span class="line">  LOG_DEBUG    /**&lt; Debug */</span>\n<span class="line">}GLOBAL_LOG_LEVEL;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、打印级别控制" tabindex="-1"><a class="header-anchor" href="#_3、打印级别控制"><span><strong>3、打印级别控制</strong></span></a></h2><p>打印级别分类后，我们定义全局变量，来全局控制打印级别。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">GLOBAL_LOG_LEVEL g_log_level = LOG_INFO;        //  default log level</span>\n<span class="line"></span>\n<span class="line">/**</span>\n<span class="line"> * @brief 设置LOG打印等级</span>\n<span class="line"> *</span>\n<span class="line"> * @param log_level</span>\n<span class="line"> */</span>\n<span class="line"></span>\n<span class="line">voidSet_Log_Lever(GLOBAL_LOG_LEVEL log_level) {</span>\n<span class="line"></span>\n<span class="line">    g_log_level = log_level;</span>\n<span class="line"></span>\n<span class="line">}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要全局调整打印级别，我们可以调用<code>Set_Log_Lever</code>的接口，实现打印级别的适时调整。</p><h2 id="_4、打印信息添加" tabindex="-1"><a class="header-anchor" href="#_4、打印信息添加"><span><strong>4、打印信息添加</strong></span></a></h2><p>在输出我们正常打印信息之前，我们也需要添加一些时间信息，打印级别信息等。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">constchar global_log_level_string[8][10] = {&quot;EMERG&quot;, &quot;ALERT&quot;, &quot;CRIT&quot;, &quot;ERR&quot;, &quot;WARNING&quot;, &quot;NOTICE&quot;, &quot;INFO&quot;, &quot;DEBUG&quot;};</span>\n<span class="line">staticchar str_tmp[512];</span>\n<span class="line"></span>\n<span class="line">\t// 增加时间信息</span>\n<span class="line">time_t now;</span>\n<span class="line">    time(&amp;now);</span>\n<span class="line">    strftime(str_tmp,sizeof(str_tmp), &quot;[%Y-%m-%d %H:%M:%S &quot;, localtime(&amp;now));</span>\n<span class="line"></span>\n<span class="line">    //加入LOG后缀信息</span>\n<span class="line">    strcat(str_tmp,global_log_level_string[level]);</span>\n<span class="line">    strcat(str_tmp, &quot;] &quot;);</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上代码，将<strong>时间和打印级别</strong>信息都添加到字符串之前。</p><p><strong>输出效果如下</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">[2022-10-2109:13:54 INFO] log info output</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5、颜色定义" tabindex="-1"><a class="header-anchor" href="#_5、颜色定义"><span><strong>5、颜色定义</strong></span></a></h2><blockquote><p>颜色控制如何做？</p></blockquote><p>很简单，在输出字符串前，符合特定的颜色控制格式，就可以更改打印颜色了。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">printf(&quot;\\033[显示方式；字背景颜色;字体颜色m…\\033[0m&quot;)</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>控制命令以\\033[开头，以m结尾，而中间则是属性码，属性代码之间使用;分隔，如\\033[1;34;42m，最后以默认颜色\\033[0m结尾，以避免影响后面正常打印！</p></blockquote><p><strong>显示方式</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>意义</strong></td><td><strong>显示方式</strong></td></tr><tr><td>默认</td><td>0</td></tr><tr><td>高亮显示</td><td>1</td></tr><tr><td>下划线</td><td>4</td></tr><tr><td>闪烁</td><td>5</td></tr><tr><td>反白显示</td><td>7</td></tr><tr><td>不可见</td><td>8</td></tr></tbody></table><p><strong>前景颜色和背景颜色</strong></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>颜色</strong></td><td><strong>前景色</strong></td><td><strong>背景色</strong></td></tr><tr><td>黑色</td><td>30</td><td>40</td></tr><tr><td>红色</td><td>31</td><td>41</td></tr><tr><td>绿色</td><td>32</td><td>42</td></tr><tr><td>黄色</td><td>33</td><td>43</td></tr><tr><td>蓝色</td><td>34</td><td>44</td></tr><tr><td>紫红色</td><td>35</td><td>45</td></tr><tr><td>青蓝色</td><td>36</td><td>46</td></tr><tr><td>白色</td><td>37</td><td>47</td></tr></tbody></table><blockquote><p>没有设置的话就是默认</p></blockquote><p><strong>颜色定义</strong></p><blockquote><p>下方定义一些常用颜色，方便打印调用。</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">\\#define LOG_CLRSTR_NONE         &quot;\\033[0m&quot;               // 默认显示</span>\n<span class="line">\\#define LOG_CLRSTR_RED          &quot;\\033[0;42;31m&quot;         // 绿红色</span>\n<span class="line">\\#define LOG_CLRSTR_GREEN        &quot;\\033[0;32m&quot;         \t// 绿色</span>\n<span class="line">\\#define LOG_CLRSTR_BLUE         &quot;\\033[0;32;34m&quot;         // 蓝色</span>\n<span class="line">\\#define LOG_CLRSTR_DARK_GRAY    &quot;\\033[1;30m&quot;            // 灰色</span>\n<span class="line">\\#define LOG_CLRSTR_CYAN         &quot;\\033[0;36m&quot;            // 青色</span>\n<span class="line">\\#define LOG_CLRSTR_PURPLE       &quot;\\033[0;35m&quot;            // 紫色</span>\n<span class="line">\\#define LOG_CLRSTR_BROWN        &quot;\\033[0;33m&quot;            // 棕色</span>\n<span class="line">\\#define LOG_CLRSTR_YELLOW       &quot;\\033[5;42;33m&quot;         // 绿黄色</span>\n<span class="line">\\#define LOG_CLRSTR_WHITE        &quot;\\033[1;37m&quot;            // 白色</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、颜色控制" tabindex="-1"><a class="header-anchor" href="#_6、颜色控制"><span><strong>6、颜色控制</strong></span></a></h2><p>定义完各类颜色后，我们要做的就是对于不同级别的打印，选择不同的颜色！</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">//LOG类型判断,选择不同打印颜色</span>\n<span class="line">switch (level)</span>\n<span class="line">    {</span>\n<span class="line">case LOG_EMERG:</span>\n<span class="line">        log_color = LOG_CLRSTR_RED;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_ALERT:</span>\n<span class="line">        log_color = LOG_CLRSTR_BLUE;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_CRIT:</span>\n<span class="line">        log_color = LOG_CLRSTR_CYAN;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_ERR:</span>\n<span class="line">        log_color = LOG_CLRSTR_RED;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_WARNING:</span>\n<span class="line">        log_color = LOG_CLRSTR_PURPLE;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_NOTICE:</span>\n<span class="line">        log_color = LOG_CLRSTR_YELLOW;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_INFO:</span>\n<span class="line">        log_color = LOG_CLRSTR_DARK_GRAY;</span>\n<span class="line">break;</span>\n<span class="line">case LOG_DEBUG:</span>\n<span class="line">        log_color = LOG_CLRSTR_BROWN;</span>\n<span class="line">break;</span>\n<span class="line">default:</span>\n<span class="line">        log_color = LOG_CLRSTR_GREEN;</span>\n<span class="line">break;</span>\n<span class="line">    }</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、颜色打印" tabindex="-1"><a class="header-anchor" href="#_7、颜色打印"><span><strong>7、颜色打印</strong></span></a></h2><p>在选择对应颜色之后，我们要做的就是将这些颜色信息，放到正常打印信息的前方。</p><blockquote><p>可以通过字符串拼接的函数实现。</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">//  重新设置标准输出</span>\n<span class="line">    sprintf(str_uart, &quot;%s&quot;,log_color);</span>\n<span class="line">    strcat(str_uart, str_tmp);</span>\n<span class="line"></span>\n<span class="line">\t...</span>\n<span class="line"></span>\n<span class="line">    strcat(str_uart,LOG_CLRSTR_NONE);</span>\n<span class="line">    strcat(str_uart, &quot;\\r\\n&quot;);</span>\n<span class="line">    printf(&quot;%s&quot;,str_uart);</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的颜色打印，说白了就是在我们要打印的字符串前方，加入打印颜色的信息即可，打印字符串结束之后，要加上<code>\\033[0m</code>，来恢复默认！</p><h2 id="_8、打印预览" tabindex="-1"><a class="header-anchor" href="#_8、打印预览"><span><strong>8、打印预览</strong></span></a></h2><p>设置完成之后，我们看一下打印预览：</p><p><a href="https://mmbiz.qpic.cn/mmbiz_png/JqvCQ8UmFgX5go54ia1QWHXLYoHpalrYTV2YaicSPfT99N5MPVubMIPDSSShXavkibDGiaMY55e0tqEH1nXR2SvKjA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" target="_blank" rel="noopener noreferrer"><img src="https://mmbiz.qpic.cn/mmbiz_png/JqvCQ8UmFgX5go54ia1QWHXLYoHpalrYTV2YaicSPfT99N5MPVubMIPDSSShXavkibDGiaMY55e0tqEH1nXR2SvKjA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></a></p><h2 id="_9、demo获取" tabindex="-1"><a class="header-anchor" href="#_9、demo获取"><span><strong>9、Demo获取</strong></span></a></h2><p>多级别彩色打印这个功能，已经封装成了一个<code>API</code>，我们直接获取源码，将<code>.c</code>和<code>.h</code>文件加入到自己工程即可使用！</p><p><strong>来源：嵌入式艺术</strong></p>',48)])])}]]),t=JSON.parse('{"path":"/Embeded/04_Driver/Log.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"不会吧，你还在赤裸裸的使用printf?","slug":"不会吧-你还在赤裸裸的使用printf","link":"#不会吧-你还在赤裸裸的使用printf","children":[]},{"level":2,"title":"1、明确需求","slug":"_1、明确需求","link":"#_1、明确需求","children":[]},{"level":2,"title":"2、打印级别分类","slug":"_2、打印级别分类","link":"#_2、打印级别分类","children":[]},{"level":2,"title":"3、打印级别控制","slug":"_3、打印级别控制","link":"#_3、打印级别控制","children":[]},{"level":2,"title":"4、打印信息添加","slug":"_4、打印信息添加","link":"#_4、打印信息添加","children":[]},{"level":2,"title":"5、颜色定义","slug":"_5、颜色定义","link":"#_5、颜色定义","children":[]},{"level":2,"title":"6、颜色控制","slug":"_6、颜色控制","link":"#_6、颜色控制","children":[]},{"level":2,"title":"7、颜色打印","slug":"_7、颜色打印","link":"#_7、颜色打印","children":[]},{"level":2,"title":"8、打印预览","slug":"_8、打印预览","link":"#_8、打印预览","children":[]},{"level":2,"title":"9、Demo获取","slug":"_9、demo获取","link":"#_9、demo获取","children":[]}],"git":{"updatedTime":1760539161000,"contributors":[{"name":"malihang","username":"malihang","email":"mlh18@qq.com","commits":2,"url":"https://github.com/malihang"}],"changelog":[{"hash":"a7e80d0b3dc4a82ae0b60b48fd4014e3ad6533d4","time":1760539161000,"email":"mlh18@qq.com","author":"malihang","message":"pages首次更新"},{"hash":"51d20094637272083ba9bf89acaec7eebe12ba38","time":1719762973000,"email":"mlh18@qq.com","author":"malihang","message":"first commit"}]},"filePathRelative":"Embeded/04_Driver/Log.md"}')}}]);